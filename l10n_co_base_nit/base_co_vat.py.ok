# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2012 OpenERP SA (<http://openerp.com>)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import logging
import string
import re

_logger = logging.getLogger(__name__)

from openerp.osv import fields, osv
from openerp.tools.misc import ustr
from openerp.tools.translate import _
from openerp import pooler, tools



class res_partner(osv.osv):
    _inherit = 'res.partner'

    def button_check_vat(self, cr, uid, ids, context=None):
        if not self.check_vat(cr, uid, ids, context=context):
            msg = self._construct_constraint_msg(cr, uid, ids, context=context)
            raise osv.except_osv(_('Error!'), msg)
        return True

    __check_vat_co_re = re.compile(r'([0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{1})$')        
       
    def check_vat(self, cr, uid, ids, context=None):
 
        partner_obj = self.browse(cr, uid, ids)[0]
        
        if not partner_obj.vat_subjected:
            return True
        
        match = self.__check_vat_co_re.match(partner_obj.vat) 
        
        if match:
          # For new TVA numbers, do a mod11 check
            num = filter(lambda s: s.isdigit(), match.group(1))        # get the digits only
            factor = ( 41,37,29, 23, 19, 17,13,7,3 )
            csum = sum([int(num[i]) * factor[i] for i in range(9)])
            check = (11 - (csum % 11)) % 11
            return check == int(num[9])
        return False
        
    def vat_change(self, cr, uid, ids, vat_type, context=None):

        if vat_type in "NITRUT":
            return {'value': {'vat_subjected' : True}}
        else:
            return {'value': {'vat_subjected' : False}}

    _columns = {
        'vat_type':fields.selection((('NIT','NIT'), ('RUT','RUT'), ('CC','CC'), ('CE','CE')),'TI',  help="Identificacion del Cliente.",required=True),
        'vat_subjected': fields.boolean('VAT Legal Statement', help="Check this box if the partner is subjected to the VAT. It will be used for the VAT legal statement.")
    }

    def _construct_constraint_msg(self, cr, uid, ids, context=None):
        msg = "\n\n El NIT que suministro no ha superado las pruebas de validacion.\n Nota: Se esperaba el siguiente formato:###.###.###-# \n Ejemplo: 900.361.230-0"
        return msg
        
    _constraints = [(check_vat, _construct_constraint_msg, ["vat","is_company","vat_type"])]


# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
